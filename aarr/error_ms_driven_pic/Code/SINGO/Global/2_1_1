push!(LOAD_PATH, ENV["SINGODIR"])
using Plasmo, Ipopt,BARON,SCIP
using JuMP
include("../bb.jl")

function createModel()
    m=Model()
    @variable(m, 0<= x1 <= 1, start=1)
    @variable(m, 0<= x2 <=1, start=1)
    @variable(m, 0<= x3 <=1)
    @variable(m, 0<= x4 <=1, start=1)
    @variable(m, 0<= x5 <=1)
    @constraint(m, 20*x1 + 12*x2 + 11*x3 + 7*x4 + 4*x5 <= 40)
    @objective(m, Min, 42*x1 - 0.5*(100*x1*x1 + 100*x2*x2 + 100*x3*x3 + 100*x4*x4 + 100*x5*x5) + 44*x2 + 45*x3 + 47*x4 + 47.5*x5)
    return m
end


P = RandomStochasticModel(createModel, 1000, 2, 2)  #RandomStochasticModel(createModel, nscen=10, nfirst=5, nparam=5)
m = copyStoModel(P)
branch_bound(m)


m= extensiveSimplifiedModel(P)
m.solver = SCIPSolver("limits/gap", mingap, "limits/absgap", mingap, "limits/time", 43200.0)
solve(m)


m= extensiveSimplifiedModel(P)
m = copyNLModel(m)
m.solver = BaronSolver()
push!(m.solver.options, (:EpsA, mingap), (:EpsR, mingap),(:MaxTime, 43200.0))
solve(m)

